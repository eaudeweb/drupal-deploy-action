name: 'Deploy a release to the server'
description: 'Copy and configure a new release to the target server'
inputs:
  ssh_user:
    description: 'SSH user account'
    required: true
  ssh_host:
    description: 'SSH host server'
    required: true
  ssh_key:
    description: 'SSH private key'
    required: true
  release_id:
    description: 'Name of the release where new release is installed (e.g. release-68cdf63)'
    required: true
  release_filename:
    description: 'Name of the resulted release archive (e.g. release-68cdf63.tar.gz)'
    required: true
  project_dir:
    description: 'Absolute path where the project root is configured (where live symlink exists)'
    required: true
  artifacts_dir:
    description: 'Absolute path where the artifacts will be deployed'
    required: true
  settings_file:
    description: 'Absolute path where settings.local.php file is located'
    required: true
  env_file:
    description: 'Absolute path where .env file is located'
    required: false
    default: ''
  robo_file:
    description: 'Absolute path where robo.yml file is located'
    required: false
    default: ''
  public_files_dir:
    description: 'Absolute path where public files directory is located'
    required: true
  private_files_dir:
    description: 'Absolute path where private files directory is located'
    required: false
    default: ''
  database_dump_dir:
    description: 'Absolute path where database dump directory is located'
    required: false
    default: ''
  artifacts_lifespan:
    description: 'The number of days after which the artifacts are deleted.'
    required: false
    default: '30'
  check_config:
    description: 'Check if there are configuration changes in the Drupal database not exported in config. Fail if true.'
    required: false
    default: 'false'
  sql_backup:
    description: 'Create a SQL database backup before doing the deployment (with release filename)'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: 'Configure SSH'
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_KEY" > ~/.ssh/server.key
        chmod 600 ~/.ssh/server.key
        cat > ~/.ssh/config <<END
        Host server
          HostName $SSH_HOST
          User $SSH_USER
          IdentityFile ~/.ssh/server.key
          StrictHostKeyChecking no
        END
      env:
        SSH_USER: ${{ inputs.ssh_user }}
        SSH_HOST: ${{ inputs.ssh_host }}
        SSH_KEY: ${{ inputs.ssh_key }}
      shell: bash

    - name: 'Check for Drupal schema changes'
      if:  ${{ inputs.check_config == 'true' }}
      run: ssh server 'cd ${{ inputs.project_dir }} && CONFIG_STATUS=$(./vendor/bin/drush config:status -n 2>&1) && echo ${CONFIG_STATUS} | grep -i -q -s "No differences"'
      shell: bash

    - name: 'Create SQL database backup'
      if:  ${{ inputs.sql_backup == 'true' }}
      run: ssh server 'cd ${{ inputs.project_dir }} && ./vendor/bin/drush sql:dump --structure-tables-list=cache,cache_*,watchdog,sessions,history --result-file=${{ inputs.artifacts_dir }}/database-before-${{ inputs.release_id }}.sql --gzip'
      shell: bash

    - name: 'Deploy release to the server'
      run: |
        ssh server 'rm -rf ${{env.BUILD_DIR}} && mkdir -p ${{env.BUILD_DIR}}'
        scp ${{ inputs.release_filename }} server:${{env.BUILD_DIR}}/
        rm ${{ inputs.release_filename }}
        ssh server 'cd ${{ env.BUILD_DIR }} && tar zxf ${{ inputs.release_filename }} && rm ${{ inputs.release_filename }}'
        ssh server 'if [ "${{ inputs.settings_file }}" != "" ]; then ln -s ${{ inputs.settings_file }} ${{ env.BUILD_SETTINGS_FILE }}; fi'
        ssh server 'if [ "${{ inputs.env_file }}" != "" ]; then ln -s ${{ inputs.env_file }} ${{ env.BUILD_ENV_FILE }}; fi'
        ssh server 'if [ "${{ inputs.robo_file }}" != "" ]; then ln -s ${{ inputs.robo_file }} ${{ env.BUILD_ROBO_FILE }}; fi'
        ssh server 'if [ "${{ inputs.public_files_dir }}" != "" ]; then rm -rf ${{ env.BUILD_PUBLIC_FILES_DIR }} && ln -s ${{ inputs.public_files_dir }} ${{ env.BUILD_PUBLIC_FILES_DIR }}; fi'
        ssh server 'if [ "${{ inputs.private_files_dir }}" != "" ]; then rm -f ${{ env.BUILD_PRIVATE_FILES_DIR }} && ln -s ${{ inputs.private_files_dir }} ${{ env.BUILD_PRIVATE_FILES_DIR }}; fi'
        ssh server 'if [ "${{ inputs.database_dump_dir }}" != "" ]; then rm -f ${{ env.BUILD_DATABASE_DUMP_DIR }} && ln -s ${{ inputs.database_dump_dir }} ${{ env.BUILD_DATABASE_DUMP_DIR }}; fi'
        ssh server 'rm -f ${{ inputs.project_dir }} && ln -s ${{ env.BUILD_DIR }} ${{ inputs.project_dir }}'
      env:
        BUILD_DIR: "${{ inputs.artifacts_dir }}/${{ inputs.release_id }}"
        BUILD_SETTINGS_FILE: "${{ inputs.artifacts_dir }}/${{ inputs.release_id }}/web/sites/default/settings.local.php"
        BUILD_ENV_FILE: "${{ inputs.artifacts_dir }}/${{ inputs.release_id }}/.env"
        BUILD_ROBO_FILE: "${{ inputs.artifacts_dir }}/${{ inputs.release_id }}/robo.yml"
        BUILD_PUBLIC_FILES_DIR: "${{ inputs.artifacts_dir }}/${{ inputs.release_id }}/web/sites/default/files"
        BUILD_PRIVATE_FILES_DIR: "${{ inputs.artifacts_dir }}/${{ inputs.release_id }}/private"
        BUILD_DATABASE_DUMP_DIR: "${{ inputs.artifacts_dir }}/${{ inputs.release_id }}/web/sync"
      shell: bash

    - name: 'Clean old artifacts'
      run:  ssh server 'cd ${{ inputs.artifacts_dir }} && if [ 0 -lt $(ls -l | grep 'release-*' | wc -l) ]; then find release-* -maxdepth 1 -type d -mtime +${{ inputs.artifacts_lifespan }} -prune -exec rm -rf {} \;; fi
      shell: bash