name: 'Deploy a release to the server'
description: 'Copy and configure a new release to the target server'
inputs:
  project_dir:
    description: 'Absolute path where the project root is configured (where live symlink exists)'
    required: true
  artifacts_dir:
    description: 'Absolute path where the artifacts will be deployed'
    required: true
  release_id:
    description: 'Name of the release where new release is installed (e.g. release-68cdf63)'
    required: true
  release_filename:
    description: 'Name of the resulted release archive (e.g. release-68cdf63.tar.gz)'
    required: true
  ssh_user:
    description: 'SSH user account'
    required: true
  ssh_host:
    description: 'SSH host server'
    required: true
  ssh_key:
    description: 'SSH private key'
    required: true
  check_config:
    description: 'Check if there are configuration changes in the Drupal database not exported in config. Fail if true.'
    required: false
    default: 'false'
  sql_backup:
    description: 'Create a SQL database backup before doing the deployment (with release filename)'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: 'Configure SSH'
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_KEY" > ~/.ssh/server.key
        chmod 600 ~/.ssh/server.key
        cat > ~/.ssh/config <<END
        Host server
          HostName $SSH_HOST
          User $SSH_USER
          IdentityFile ~/.ssh/server.key
          StrictHostKeyChecking no
        END
      env:
        SSH_USER: ${{ inputs.ssh_user }}
        SSH_HOST: ${{ inputs.ssh_host }}
        SSH_KEY: ${{ inputs.ssh_key }}
      shell: bash

    - name: 'Check for Drupal schema changes'
      if:  ${{ inputs.check_config == 'true' }}
      run: ssh server 'cd ${{env.PROJECT_DIR}} && CONFIG_STATUS=$(./vendor/bin/drush config:status -n 2>&1) && echo ${CONFIG_STATUS} | grep -i -q -s "No differences"'
      shell: bash

    - name: 'Create SQL database backup'
      if:  ${{ inputs.sql_backup == 'true' }}
      run: ssh server 'cd ${{env.PROJECT_DIR}} && ./vendor/bin/drush sql:dump --structure-tables-list=cache,cache_*,watchdog,sessions,history --result-file=${{ inputs.artifacts_dir }}/database-before-${{ inputs.release_id }}.sql --gzip'
      shell: bash

    - name: 'Deploy release to the server'
      run: |
        ssh server 'rm -rf ${{env.BUILD_DIR}} && mkdir -p ${{env.BUILD_DIR}}'
        scp ${{ inputs.release_filename }} server:${{env.BUILD_DIR}}/
        rm ${{ inputs.release_filename }}
        ssh server 'cd ${{env.BUILD_DIR}} && tar zxf ${{ inputs.release_filename }} && rm ${{ inputs.release_filename }}'
        ssh server 'rm -f ${{env.LIVE_DIR}} && ln -s ${{env.BUILD_DIR}} ${{env.LIVE_DIR}}'
        ssh server 'rm -f ${{env.PROJECT_DIR}}/vendor && ln -s ${{env.LIVE_DIR}}/vendor ${{env.PROJECT_DIR}}/vendor'
        ssh server 'rm -f ${{env.PROJECT_DIR}}/web/core && ln -s ${{env.LIVE_DIR}}/web/core ${{env.PROJECT_DIR}}/web/core'
        ssh server 'rm -f ${{env.PROJECT_DIR}}/web/libraries && ${{env.LIVE_DIR}}/web/libraries ln -s ${{env.PROJECT_DIR}}/web/libraries'
        ssh server 'rm -f ${{env.PROJECT_DIR}}/web/modules/contrib && ln -s ${{env.LIVE_DIR}}/web/modules/contrib ${{env.PROJECT_DIR}}/web/modules/contrib'
        ssh server 'rm -f ${{env.PROJECT_DIR}}/web/profiles/contrib && ln -s ${{env.LIVE_DIR}}/web/profiles/contrib ${{env.PROJECT_DIR}}/web/profiles/contrib'
        ssh server 'rm -f ${{env.PROJECT_DIR}}/web/themes/contrib && ln -s ${{env.LIVE_DIR}}/web/themes/contrib ${{env.PROJECT_DIR}}/web/themes/contrib'
      env:
        BUILD_DIR: "${{ inputs.artifacts_dir }}/${{ inputs.release_id }}"
        LIVE_DIR: "${{ inputs.artifacts_dir }}/live"
        PROJECT_DIR: "${{ inputs.project_dir }}"
      shell: bash